/***********************************************************************/
/***************本代码由协议工具自动生成，请勿手动修改****************/
/************************ 协议版本号:#类型名称，注释 ******************************/
/***********************************************************************/
#macro(gettype $i)
#if($i.ClientType == "String")##
string##
#elseif($i.ClientType == "uint" || $i.ClientType == "int" || $i.ClientType == "Number")##
number##
#else##
$i.ClientType ##
#end##
#end

#macro(chg $str)
$str.replace("/*", "").replace("*/", "")
#end


#macro(pack_func_param_string $m)
#foreach($i in $m.MsgParas)##
#if($i.Type == "ByteArray")##
 $i.Name : ByteArray##
#elseif($i.IsArray && $velocityCount==1)##
 $i.Name : Array< #gettype($i) >##
#elseif($velocityCount==1)##
 $i.Name :#gettype($i) ##
#elseif($i.IsArray)##
 ,$i.Name : Array< #gettype($i) >##
#else##
 ,$i.Name :#gettype($i) ##
#end##
#end
#end

#macro(outDebugParas $m)
#foreach($i in $m.MsgParas)##
+"|$i.Name#**#"+v_$m.Name.$i.Name##
#end
#end

//package cow.net.structs
//{	
	//import sys.utils.Stream;	
	
class Protocols {
#foreach( $m in $msgs )
#if($m.Name.Substring(0,2)!="__")
	$m.Desc
	public static  $str_tool.GetMsgType($m.Type)_$m.Name.ToUpper() :number = $m.Cmd;	//$m.Name
#end	
#end
	private _FUNCS:Object = new Object();
		
		/**
		 * 获取发送协议函数名称
		 * @param cmd:uint
		 */		
	public getFuncName(cmd:number):string{
		if(this._FUNCS[cmd]){
			return this._FUNCS[cmd];
		}
		return null;
	}
		
	private _send_func:Function;
	private _stream:ByteArray = new ByteArray;
		
		/**
		 * 发送明文数据包（自动加密） 
		 * @param stream
		 */
	public constructor(f:Function){
		this._send_func = f;
		this._stream.endian = Endian.LITTLE_ENDIAN;
			
#foreach( $m in $msgs )
#if($m.Name.Substring(0,2)!="__")
#if($m.Type.ToString().ToUpper() == "C2S" || $m.Type.ToString().ToUpper() == "BOTH")
		this._FUNCS[$m.Cmd] = "$m.Name";
#end				
#end
#end
	}
		
#foreach( $m in $msgs )
#if($m.Name.Substring(0,2)!="__")
#if($m.Type.ToString().ToUpper() == "C2S" || $m.Type.ToString().ToUpper() == "BOTH")
	public $m.Name (#pack_func_param_string($m)):void{
		this._stream.reset();
		this._stream.optcode = $m.Cmd;
		this._stream.writeUint16( $m.Cmd );
#if($m.MsgParas.Count >0 )			
#foreach( $i in $m.MsgParas)			
			//$i.OnlyDescStr
#if($i.Type == "ByteArray")
		this._stream.writeUint16($i.Name .length)
		this._stream.writeStream($i.Name);
#elseif($i.IsArray && $str_tool.IsStruct($i.Type))
		this._stream.writeUint16($i.Name .length);
		for(var i:number=0;i<$i.Name .length;i++){
			$i.Name [i].write(this._stream);
		}
#elseif($str_tool.IsStruct($i.Type))
		$i.Name .write(this._stream);
#elseif($i.IsArray)
#if($i.Type == "String")
		if($i.Name .length > 1000)
			throw("StringArray::length max 1000");
#end
		this._stream.writeUint16($i.Name .length);
		for(var i:number=0;i<$i.Name .length;i++){
			this._stream#**#.$i.WriteStreamFuncName ($i.Name [i]);
		}		
#else
		this._stream#**#.$i.WriteStreamFuncName ($i.Name);		
#end				
#end
#end
		this._send_func(this._stream);			
	}
#end
#end
#end
}
//}